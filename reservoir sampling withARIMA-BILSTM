import numpy as np
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Bidirectional, LSTM, Dense
from sklearn.model_selection import train_test_split
from statsmodels.tsa.arima.model import ARIMA
def reservoir_sampling1(data, k):
    sample = []
    for i, point in enumerate(data):
        if i < k:
            sample.append(point)
        else:
            j = np.random.randint(0, i + 1)
            if j < k:
                sample[j] = point
    return sample


num_samples = 500
feat = np.random.randn(num_samples, 789)
lab = np.random.randn(num_samples,)
data = pd.concat([pd.DataFrame(feat), pd.DataFrame(lab)], axis=1)
data = np.array(data)

# Perform reservoir sampling on each node
sample_size = 100
sampled_data = reservoir_sampling1(feat, sample_size)

# Split data into features and labels
sampled_features = np.array([item[:-1] for item in sampled_data])
sampled_labels = np.array([item[-1] for item in sampled_data])

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(sampled_data, sampled_labels, test_size=0.2, random_state=42)


 # ARIMA preprocessing
arima_params = []
for item in X_train:
    model = ARIMA(item, order=(1, 1, 1))
    arima_params.append(model.fit().params)

X_train_arima = []
for item, params in zip(X_train, arima_params):
    forecast = np.dot(params, item[-len(params):])  # Example forecast using dot product
    X_train_arima.append(item * forecast)
X_test_arima = []
for item, params in zip(X_test, arima_params):
    forecast = np.dot(params, item[-len(params):])  # Example forecast using dot product
    X_test_arima.append(item * forecast)
xtrain = np.array(X_train_arima)
xtest = np.array(X_test_arima)
xtrain = xtrain.reshape(xtrain.shape[0], xtrain.shape[1], 1)
xtest = xtest.reshape(xtest.shape[0], xtest.shape[1], 1)

# Define BiLSTM model for regression
model = Sequential()
model.add(Bidirectional(LSTM(10), input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(1))  # No activation for regression
model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mse'])

# Train the model
model.fit(xtrain, y_train, epochs=100, batch_size=128)

y_pred = model.predict(xtest)

# Evaluate the model
mse = np.mean((y_pred - y_test)**2)
print(f"Mean Squared Error on Test Data: {mse}")
